@model WebApp.Models.RegisterModel
<script src="@(Url.Content("~/Scripts/jquery.validate.min.js"))"></script>
<script src="@(Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js"))"></script>
@using (Html.BeginForm((string)ViewBag.FormAction, "Account", FormMethod.Post, new { @class = "form-horizontal", @id = "registration-form", @enctype = "multipart/form-data" }))
{
    @(Html.ValidationSummary(true, "Account creation was unsuccessful. Please correct the errors and try again."))

    <fieldset>
        <legend>Registration Form</legend>
        @{ Html.RenderPartial("_PageMessagePartial", Model.PageMessage);}
        <div class="control-group">
            @(Html.LabelFor(m => m.UserName, new { @class = "control-label" }))
            <div class="controls">
                <div class="input-append">
                    @(Html.TextBoxFor(m => m.UserName, new { @class = "input-xlarge" }))
                </div>
                @(Html.ValidationMessageFor(m => m.UserName))
            </div>
        </div>
        <div class="control-group">
            @(Html.LabelFor(m => m.Email, new { @class = "control-label" }))
            <div class="controls">
                <div class="input-append">
                    @(Html.TextBoxFor(m => m.Email, new { @class = "input-xlarge" }))
                </div>
                @(Html.ValidationMessageFor(m => m.Email))
            </div>
        </div>
        <div class="control-group">
            @(Html.LabelFor(m => m.Password, new { @class = "control-label" }))
            <div class="controls">
                <div class="input-append">
                    @(Html.PasswordFor(m => m.Password, new { @class = "input-xlarge" }))
                </div>
                @(Html.ValidationMessageFor(m => m.Password))
            </div>
        </div>
        <div class="control-group">
            @(Html.LabelFor(m => m.ConfirmPassword, new { @class = "control-label" }))
            <div class="controls">
                <div class="input-append">
                    @(Html.PasswordFor(m => m.ConfirmPassword, new { @class = "input-xlarge" }))
                </div>
                @(Html.ValidationMessageFor(m => m.ConfirmPassword))
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>Select a Category</legend>
        <div class="control-group">
            @(Html.LabelFor(m => m.Plans.SelectedPlan, new { @class = "control-label" }))
            <div class="controls">
                <div class="input-append">
                    @Html.DropDownListFor(m => m.Plans.SelectedPlan, Model.Plans.MyPlans)
                </div>
                @(Html.ValidationMessageFor(m => m.Plans.SelectedPlan))
            </div>
        </div>
    </fieldset>
    <fieldset id="payment-info">
        <legend>Payment Information</legend>
        @Html.EditorFor(m => m.CreditCard, "CreditCardPartialView")
    </fieldset>
    
    <fieldset id="billing-address">
        <legend>Billing Address</legend>
        @Html.EditorFor(m => m.BillingAddress, "BillingAddressPartialView")
    </fieldset>
    <div class="form-actions">
        <input type="submit" value="Register" class="btn btn-primary" />
    </div>
}
<script type="text/javascript">
    $('#CreditCard_ExpirationDate').datepicker();

    //show/hide Credit Card & Billing Address fieldsets 
    //based on the value of SelectedPlan combo box
    requirementsFunction();
    $('#Plans_SelectedPlan').change(requirementsFunction);

    //this function gets the currently selected Plan and, 
    //based on the requirements set, show or hide the appropriate fieldset elements
    function requirementsFunction() {
        var id = $("#Plans_SelectedPlan :selected").val();
        if (id != null) {
            var url = '@Url.Action("GetSelectedPlan", "Account")/' + id;
            $.getJSON(url, null, function (data) {
                //get all input element from the fieldset with id="payment-info"
                var paymentInfoFields = $('#payment-info').find('input, select');
                if (data.isCreditCardAtSignupRequired == "No") {
                    $("#payment-info").fadeOut("fast");
                    //disable the fields so client side validation won't validate them
                    paymentInfoFields.each(function (index) {
                        $(this).attr('disabled', 'disabled');
                    });
                } else {
                    $("#payment-info").fadeIn("fast");
                    //Enable the fields so client side validation will validate
                    paymentInfoFields.each(function (index) {
                        $(this).removeAttr('disabled');
                    });
                }

                var billingAddressFields = $('#billing-address').find('input');
                //get all input element from the fieldset with id="billing-address"
                if (data.isBillingAddressAtSignupRequired == "No") {
                    $("#billing-address").fadeOut("fast");
                    //disable the fields so client side validation won't validate them
                    billingAddressFields.each(function (index) {
                        $(this).attr('disabled', 'disabled');
                    });
                } else {
                    $("#billing-address").fadeIn("fast");
                    //Enable the fields so client side validation will validate
                    billingAddressFields.each(function (index) {
                        $(this).removeAttr('disabled');
                    });
                }
            });
        }
        return false;
    }
</script>
